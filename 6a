#include <iostream>
#include <queue>
using namespace std;

const int T = 2;

class BTreeNode {
public:
    int keys[2 * T - 1];         
    BTreeNode* children[2 * T];  
    int n;                       
    bool leaf;                   

    BTreeNode(bool isLeaf) {
        leaf = isLeaf;
        n = 0;
        for (int i = 0; i < 2 * T; i++) children[i] = nullptr;
    }

    void traverseLevelOrder();
    void insertNonFull(int k);
    void splitChild(int i, BTreeNode* y);
    BTreeNode* search(int k);
    int findKey(int k);
    void remove(int k);
    void removeFromLeaf(int idx);
    void merge(int idx);
};

class BTree {
public:
    BTreeNode* root;

    BTree() {
        root = nullptr;
    }

    void insert(int k);
    void levelOrder();
    void remove(int k);
};


void BTree::insert(int k) {
    if (root == nullptr) {
        root = new BTreeNode(true);
        root->keys[0] = k;
        root->n = 1;
    } else {
        if (root->n == 2 * T - 1) {
            BTreeNode* s = new BTreeNode(false);
            s->children[0] = root;
            s->splitChild(0, root);
            int i = (s->keys[0] < k) ? 1 : 0;
            s->children[i]->insertNonFull(k);
            root = s;
        } else {
            root->insertNonFull(k);
        }
    }
}


void BTreeNode::insertNonFull(int k) {
    int i = n - 1;

    if (leaf) {
        while (i >= 0 && keys[i] > k) {
            keys[i + 1] = keys[i];
            i--;
        }
        keys[i + 1] = k;
        n++;
    } else {
        while (i >= 0 && keys[i] > k) i--;
        if (children[i + 1]->n == 2 * T - 1) {
            splitChild(i + 1, children[i + 1]);
            if (keys[i + 1] < k) i++;
        }
        children[i + 1]->insertNonFull(k);
    }
}


void BTreeNode::splitChild(int i, BTreeNode* y) {
    BTreeNode* z = new BTreeNode(y->leaf);
    z->n = T - 1;

    for (int j = 0; j < T - 1; j++)
        z->keys[j] = y->keys[j + T];

    if (!y->leaf) {
        for (int j = 0; j < T; j++)
            z->children[j] = y->children[j + T];
    }

    y->n = T - 1;

    for (int j = n; j >= i + 1; j--)
        children[j + 1] = children[j];

    children[i + 1] = z;

    for (int j = n - 1; j >= i; j--)
        keys[j + 1] = keys[j];

    keys[i] = y->keys[T - 1];
    n++;
}


void BTree::levelOrder() {
    if (root == nullptr) return;

    queue<BTreeNode*> q;
    q.push(root);

    while (!q.empty()) {
        int sz = q.size();
        while (sz--) {
            BTreeNode* temp = q.front();
            q.pop();

            for (int i = 0; i < temp->n; i++)
                cout << temp->keys[i] << " ";
            cout << "| ";

            if (!temp->leaf) {
                for (int i = 0; i <= temp->n; i++)
                    if (temp->children[i]) q.push(temp->children[i]);
            }
        }
        cout << endl;
    }
}


int BTreeNode::findKey(int k) {
    int idx = 0;
    while (idx < n && keys[idx] < k) ++idx;
    return idx;
}


void BTree::remove(int k) {
    if (!root) {
        cout << "Tree is empty.\n";
        return;
    }

    root->remove(k);

    if (root->n == 0) {
        BTreeNode* tmp = root;
        if (root->leaf) root = nullptr;
        else root = root->children[0];

        delete tmp;
    }
}


void BTreeNode::remove(int k) {
    int idx = findKey(k);

    if (idx < n && keys[idx] == k) {
        if (leaf)
            removeFromLeaf(idx);
        else
            cout << "Delete only supports leaf keys in this version.\n";
    } else {
        if (leaf) {
            cout << "Key not found.\n";
            return;
        }
        children[idx]->remove(k);
    }
}


void BTreeNode::removeFromLeaf(int idx) {
    for (int i = idx + 1; i < n; ++i)
        keys[i - 1] = keys[i];
    n--;
}
int main() {
    BTree tree;
    int choice, key;

    while (true) {
        cout << "\n1. Insert\n2. Level Order Display\n3. Delete\n4. Exit\nEnter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter key to insert: ";
                cin >> key;
                tree.insert(key);
                break;
            case 2:
                cout << "Level order traversal:\n";
                tree.levelOrder();
                break;
            case 3:
                cout << "Enter key to delete (leaf only): ";
                cin >> key;
                tree.remove(key);
                break;
            case 4:
                return 0;
            default:
                cout << "Invalid choice\n";
        }
    }

    return 0;
}
