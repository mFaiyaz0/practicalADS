#include <iostream>
using namespace std;

enum Color { RED, BLACK };

struct Directory {
    string name;
    Color color;
    Directory *left, *right, *parent;

    Directory(string name) {
        this->name = name;
        left = right = parent = nullptr;
        color = RED; 
    }
};

class FileSystem {
    Directory *root;

    void rotateLeft(Directory *&);
    void rotateRight(Directory *&);
    void fixInsert(Directory *&);
    void fixDelete(Directory *&);
    void transplant(Directory *, Directory *);
    Directory* minimum(Directory *);
    Directory* search(Directory *, string);
    void inorder(Directory *);

public:
    FileSystem() : root(nullptr) {}

    void insert(string name);
    void remove(string name);
    void display();
};


void FileSystem::rotateLeft(Directory *&x) {
    Directory *y = x->right;
    x->right = y->left;
    if (y->left) y->left->parent = x;
    y->parent = x->parent;
    if (!x->parent)
        root = y;
    else if (x == x->parent->left)
        x->parent->left = y;
    else
        x->parent->right = y;
    y->left = x;
    x->parent = y;
}


void FileSystem::rotateRight(Directory *&x) {
    Directory *y = x->left;
    x->left = y->right;
    if (y->right) y->right->parent = x;
    y->parent = x->parent;
    if (!x->parent)
        root = y;
    else if (x == x->parent->right)
        x->parent->right = y;
    else
        x->parent->left = y;
    y->right = x;
    x->parent = y;
}


void FileSystem::fixInsert(Directory *&z) {
    while (z != root && z->parent->color == RED) {
        if (z->parent == z->parent->parent->left) {
            Directory *y = z->parent->parent->right;
            if (y && y->color == RED) {
                z->parent->color = BLACK;
                y->color = BLACK;
                z->parent->parent->color = RED;
                z = z->parent->parent;
            } else {
                if (z == z->parent->right) {
                    z = z->parent;
                    rotateLeft(z);
                }
                z->parent->color = BLACK;
                z->parent->parent->color = RED;
                rotateRight(z->parent->parent);
            }
        } else {
            Directory *y = z->parent->parent->left;
            if (y && y->color == RED) {
                z->parent->color = BLACK;
                y->color = BLACK;
                z->parent->parent->color = RED;
                z = z->parent->parent;
            } else {
                if (z == z->parent->left) {
                    z = z->parent;
                    rotateRight(z);
                }
                z->parent->color = BLACK;
                z->parent->parent->color = RED;
                rotateLeft(z->parent->parent);
            }
        }
    }
    root->color = BLACK;
}


void FileSystem::insert(string name) {
    Directory *z = new Directory(name);
    Directory *y = nullptr;
    Directory *x = root;

    while (x) {
        y = x;
        if (z->name < x->name)
            x = x->left;
        else if (z->name > x->name)
            x = x->right;
        else {
            cout << "Directory already exists!\n";
            return;
        }
    }

    z->parent = y;
    if (!y)
        root = z;
    else if (z->name < y->name)
        y->left = z;
    else
        y->right = z;

    fixInsert(z);
    cout << "Directory '" << name << "' inserted.\n";
}


void FileSystem::inorder(Directory *node) {
    if (!node) return;
    inorder(node->left);
    cout << (node->color == RED ? "[R] " : "[B] ") << node->name << endl;
    inorder(node->right);
}

void FileSystem::display() {
    if (!root) {
        cout << "No directories available.\n";
        return;
    }
    cout << "\nDirectory Structure:\n";
    inorder(root);
}


Directory* FileSystem::search(Directory *node, string name) {
    if (!node || node->name == name) return node;
    if (name < node->name)
        return search(node->left, name);
    return search(node->right, name);
}


Directory* FileSystem::minimum(Directory *node) {
    while (node->left)
        node = node->left;
    return node;
}


void FileSystem::transplant(Directory *u, Directory *v) {
    if (!u->parent)
        root = v;
    else if (u == u->parent->left)
        u->parent->left = v;
    else
        u->parent->right = v;
    if (v)
        v->parent = u->parent;
}


void FileSystem::remove(string name) {
    Directory *z = search(root, name);
    if (!z) {
        cout << "Directory not found!\n";
        return;
    }

    Directory *y = z;
    Directory *x;
    Color yOriginalColor = y->color;

    if (!z->left) {
        x = z->right;
        transplant(z, z->right);
    } else if (!z->right) {
        x = z->left;
        transplant(z, z->left);
    } else {
        y = minimum(z->right);
        yOriginalColor = y->color;
        x = y->right;

        if (y->parent == z) {
            if (x) x->parent = y;
        } else {
            transplant(y, y->right);
            y->right = z->right;
            y->right->parent = y;
        }

        transplant(z, y);
        y->left = z->left;
        y->left->parent = y;
        y->color = z->color;
    }

    if (yOriginalColor == BLACK && x)
        fixDelete(x);

    delete z;
    cout << "Directory '" << name << "' deleted.\n";
}


void FileSystem::fixDelete(Directory *&x) {
    while (x != root && x->color == BLACK) {
        if (x == x->parent->left) {
            Directory *w = x->parent->right;
            if (w && w->color == RED) {
                w->color = BLACK;
                x->parent->color = RED;
                rotateLeft(x->parent);
                w = x->parent->right;
            }
            if (w && (!w->left || w->left->color == BLACK) && (!w->right || w->right->color == BLACK)) {
                w->color = RED;
                x = x->parent;
            } else {
                if (w && (!w->right || w->right->color == BLACK)) {
                    if (w->left) w->left->color = BLACK;
                    w->color = RED;
                    rotateRight(w);
                    w = x->parent->right;
                }
                if (w) {
                    w->color = x->parent->color;
                    x->parent->color = BLACK;
                    if (w->right) w->right->color = BLACK;
                    rotateLeft(x->parent);
                }
                x = root;
            }
        } else {
            Directory *w = x->parent->left;
            if (w && w->color == RED) {
                w->color = BLACK;
                x->parent->color = RED;
                rotateRight(x->parent);
                w = x->parent->left;
            }
            if (w && (!w->left || w->left->color == BLACK) && (!w->right || w->right->color == BLACK)) {
                w->color = RED;
                x = x->parent;
            } else {
                if (w && (!w->left || w->left->color == BLACK)) {
                    if (w->right) w->right->color = BLACK;
                    w->color = RED;
                    rotateLeft(w);
                    w = x->parent->left;
                }
                if (w) {
                    w->color = x->parent->color;
                    x->parent->color = BLACK;
                    if (w->left) w->left->color = BLACK;
                    rotateRight(x->parent);
                }
                x = root;
            }
        }
    }
    if (x) x->color = BLACK;
}
int main() {
    FileSystem fs;
    int choice;
    string dirname;

    while (true) {
        cout << "\n1. Create Directory\n2. Delete Directory\n3. Display Structure\n4. Exit\nEnter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter directory name: ";
                cin >> dirname;
                fs.insert(dirname);
                break;
            case 2:
                cout << "Enter directory name to delete: ";
                cin >> dirname;
                fs.remove(dirname);
                break;
            case 3:
                fs.display();
                break;
            case 4:
                return 0;
            default:
                cout << "Invalid choice!\n";
        }
    }
}
