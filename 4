#include<iostream>
#include<climits>
using namespace std;
#define V 5
int minIndex(int visited[],int minWeight[]){
    int min= INT_MAX;
    int minI=-1;
    for(int i=0;i<V;i++){
        if(visited[i]==0 && minWeight[i]<min){
            min=minWeight[i];
            minI=i;
        }
    }
    return minI;
}
void printMst(int parent[],int graph[V][V]){
    cout<<"edge \t weight\n";
    int totalCost=0;
    for(int i=1;i<V;i++){
        cout<<parent[i]<<" - "<<i<<"\t"<<graph[i][parent[i]]<<endl;
        totalCost+=graph[i][parent[i]];
    }
    cout<<"Minimum cost\t"<<totalCost;
}
void primMst(int graph[V][V]){
    int visited[V];
    int minWeight[V];
    int parent[V];
   
    for(int i=0;i<V;i++){
        visited[i]=0;
        minWeight[i]=INT_MAX;
    }
    minWeight[0]=0;
    parent[0]=-1;
    for(int i=0;i<V-1;i++){
        int u=minIndex(visited,minWeight);
        visited[u]=1;
        for(int v=0;v<V;v++){
            if(graph[u][v] && visited[v]==0 &&graph[u][v]<minWeight[v]){
                minWeight[v]=graph[u][v];
                parent[v]=u;
            }
        }

    }
    printMst(parent,graph);

}
int main(){
    int graph[V][V]={
        {0,1,5,2,4},
        {1,0,3,1,2},
        {5,3,0,4,1},
        {2,1,4,0,3},
        {4,2,1,3,0}
    };
    primMst(graph);
    return 0;
}
