#include<iostream>
using namespace std;

struct avl {
    int player_id;
    int score;
    avl *left;
    avl *right;
    int height;

    avl(int id, int sc) {
        player_id = id;
        score = sc;
        left = right = NULL;
        height = 1;
    }
};

int getHeight(avl *root) {
    if (root == NULL) {
        return 0;
    }
    return root->height;
}

int getBalance(avl *root) {
    if (root == NULL) {
        return 0;
    }
    return getHeight(root->left) - getHeight(root->right);
}

avl* rightRotate(avl *y) {
    avl *x = y->left;
    avl *T2 = x->right;
    x->right = y;
    y->left = T2;
    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
    return x;
}

avl* leftRotate(avl *x) {
    avl *y = x->right;
    avl *T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
    return y;
}

avl* insert(avl *root, int player_id, int score) {
    if (root == NULL) return new avl(player_id, score);

    if (player_id < root->player_id)
        root->left = insert(root->left, player_id, score);
    else if (player_id > root->player_id)
        root->right = insert(root->right, player_id, score);
    else {
        cout << "Player ID already registered!\n";
        return root;
    }

    root->height = 1 + max(getHeight(root->left), getHeight(root->right));
    int balance = getBalance(root);

    if (balance > 1 && player_id < root->left->player_id)
        return rightRotate(root);
    if (balance < -1 && player_id > root->right->player_id)
        return leftRotate(root);
    if (balance > 1 && player_id > root->left->player_id) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    if (balance < -1 && player_id < root->right->player_id) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

avl* minValueNode(avl *node) {
    avl *current = node;
    while (current->left != NULL) current = current->left;
    return current;
}

avl* deleteNode(avl *root, int player_id) {
    if (root == NULL) return root;

    if (player_id < root->player_id)
        root->left = deleteNode(root->left, player_id);
    else if (player_id > root->player_id)
        root->right = deleteNode(root->right, player_id);
    else {
        if (root->left == NULL || root->right == NULL) {
            avl *temp = root->left ? root->left : root->right;
            if (temp == NULL) {
                temp = root;
                root = NULL;
            } else
                *root = *temp;
            delete temp;
        } else {
            avl *temp = minValueNode(root->right);
            root->player_id = temp->player_id;
            root->score = temp->score;
            root->right = deleteNode(root->right, temp->player_id);
        }
    }

    if (root == NULL) return root;

    root->height = 1 + max(getHeight(root->left), getHeight(root->right));
    int balance = getBalance(root);

    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

void displayLeaderboard(avl *root) {
    if (root == NULL) return;
    displayLeaderboard(root->right);
    cout << "Player ID: " << root->player_id << " | Score: " << root->score << endl;
    displayLeaderboard(root->left);
}

int main() {
    avl *root = NULL;
    int choice, player_id, score;

    do {
        cout << "\n===== Multiplayer Game Menu =====\n";
        cout << "1. Register Player\n";
        cout << "2. Display Leaderboard\n";
        cout << "3. Remove Player\n";
        cout << "4. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch(choice) {
            case 1:
                cout << "Enter Player ID: ";
                cin >> player_id;
                cout << "Enter Score: ";
                cin >> score;
                root = insert(root, player_id, score);
                break;
            case 2:
                cout << "\n--- Leaderboard ---\n";
                displayLeaderboard(root);
                break;
            case 3:
                cout << "Enter Player ID to remove: ";
                cin >> player_id;
                root = deleteNode(root, player_id);
                cout << "Player removed.\n";
                break;
            case 4:
                cout << "Exiting Game System.\n";
                break;
            default:
                cout << "Invalid choice!\n";
        }

    } while(choice != 4);

    return 0;
}
